<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="publish">

	<property file="build.properties" />
	<tstamp>
		<format property="date.today" pattern="${date.today.pattern}" />
	</tstamp>
	<!-- 补丁包名称 -->
	<property name="dest.zip" value="${project.name}_${date.today}_patch.zip" />
	
	
	
	
	
	
	
	
	<target name="prepare-src" depends="init">
        <!-- create directories -->
        <mkdir dir="${build.src}" />
        <mkdir dir="${jar.dest}" />
        <mkdir dir="${war.dest}" />
        <mkdir dir="${buildwar.dest}" />
        <mkdir dir="${build.lib}" />

        <!-- copy src files 首先从工程src目录下copy源码到bulid文件夹的build目录中，以备后面编译时获取源文件 -->
        <copy todir="${build.src}">
            <fileset dir="${src.dir}" />
        </copy>
        <!--将webapp下的文件全部copy到临时打包目录里面，jar包另外处理-->
        <copy todir="${buildwar.dest}">
            <fileset dir="${webapp.dir}">
                <exclude name="**/*.jar" />
            </fileset>
        </copy>
        <!-- 删除 build/webapp/WEB-INF/lib下面所有文件及目录，不包括lib目录 -->
        <delete includeemptydirs="true">
            <fileset dir="${buildwar.dest}/WEB-INF/lib" includes="**/*" />
        </delete>
        <!--copy 所有jar到 build/lib下，以备打war包用，只复制jar，不复制目录 -->
        <copy todir="${build.lib}" flatten="true">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar" />
            </fileset>
        </copy>
    </target>
	
	
	 <target name="build" depends="prepare-src">
        <echo message="开始编译............."></echo>
        <javac srcdir="${build.src}" destdir="${buildwar.dest}/WEB-INF/classes" memorymaximumsize="500M" fork="true" encoding="UTF8" debug="${debug}" optimize="${optimize}">
            <classpath refid="classpath" />
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${buildwar.dest}/WEB-INF/classes" />
        </copy>
        <echo message="编译成功............."></echo>
    </target>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- target:从svn日志中，取出checkin文件 -->
	<target name="patchfile" depends="init" description="处理 svn_changge 日志 ">
		<!-- 去掉 SVN日志中的注释，只保留Added和Modified记录 -->
		<concat destfile="${patch.includesfile}" append="false" force="true">
			<fileset file="${change.log}" />
			<filterchain>
				<containsregex byline="true" pattern="^([\s]+)(?:A|M)([\s]+)(.+)$" replace="\3" />
			</filterchain>
		</concat>
		<!-- 去掉 SVN日志中的注释，只保留Added和Modified记录的java文件 -->
		<concat destfile="${patch.includesfile.java}" append="false" force="true">
			<fileset file="${change.log}" />
			<filterchain>
				<containsregex byline="true" pattern="^([\s]+)(?:A|M)([\s]+)(.+)\.java$" replace="\3.java" />
			</filterchain>
		</concat>
		
		<!-- 将src目录替换为classes目录 主要针对提交的java代码 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.java$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1.class" />
		</replaceregexp>
		
		<!-- 将src目录下的【内部类】替换到classes目录 主要针对提交的java代码 -->
		<replaceregexp file="${patch.includesfile.java}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.java$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1$*.class" />
		</replaceregexp>
		
		<!-- 将src目录下的xml配置文件替换到classes目录下 主要针对提交的xml -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.xml$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1.xml" />
		</replaceregexp>
		
		<!-- 将src目录下的properties文件替换到classes目录下 主要针对提交的properties文件 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.properties$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1.properties" />
		</replaceregexp>
		
		<!-- 将config目录下的xml配置文件替换到classes目录下 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:config)/(.+)\.xml$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1.xml" />
		</replaceregexp>
		
		<!-- 将config目录下的properties配置文件替换到classes目录下 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:config)/(.+)\.properties$" />
			<substitution expression="${WebRoot.name}/WEB-INF/classes/\1.properties" />
		</replaceregexp>
		
		<!-- 替换掉WebRoot/前面的路径 主要针对提交.js .css 等图片页面文件 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?=X) 从句子前面读取 如果X前面为空直接略过。 前面不为空的执行替换操作 -->
			<regexp pattern="^/.+/(?=${WebRoot.name}/)" />
			<substitution expression="" />
		</replaceregexp>
	</target>
	
	<!-- target:package -->
	<target name="package" description="补丁包">
		<delete dir="${build.dir}/${WebRoot.name}" />
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="." includesfile="${patch.includesfile}" />
		</copy>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="." includesfile="${patch.includesfile.java}" />
		</copy>
		<delete file="${build.dir}/${dest.zip}" />
		<zip destfile="${build.dir}/${dest.zip}" compress="true">
			<zipfileset prefix="${project.name}" dir="${build.dir}/${WebRoot.name}">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>
	
	<!-- target:release without compile -->
	<target name="patch_without_compile" depends="patchfile, package"
		description="--> release">
		<echo  level="info">补丁包打包结束</echo>
	</target>
	
	<!-- shutdown_tomcat -->
    <target name="shutdowntomcat" depends="patch_without_compile" description="========shutdowntomcat===========">
    	<echo message="###关闭Tomcat开始###" level="info" />
    	<!-- <sshexec failonerror="true" command="${tomcat.home}/bin/daemon.sh stop" host="${remote.server.ip}" username="${remote.server.name}" password="${remote.server.pwd}"  trust="true"/> -->
    	<sshexec port="${remote.server.port}" failonerror="true" command="${tomcat.home}/bin/shutdown.sh" host="${remote.server.ip}" username="${remote.server.name}" password="${remote.server.pwd}"  trust="true"/>
        <sleep seconds="10"/>
    	<echo message="###关闭Tomcat结束###" level="info" />
    </target>
    
    <!-- startup_tomcat -->
    <target name="startuptomcat" description="========startuptomcat===========">
    	<echo message="###启动Tomcat开始###" level="info" />
        <sleep seconds="5"/>
    	<!-- <sshexec failonerror="true" command="${tomcat.home}/bin/daemon.sh start" host="${remote.server.ip}" username="${remote.server.name}" password="${remote.server.pwd}"  trust="true"/> -->
    	<sshexec port="${remote.server.port}" failonerror="true" command="${tomcat.home}/bin/startup.sh" host="${remote.server.ip}" username="${remote.server.name}" password="${remote.server.pwd}"  trust="true"/>
    	<echo message="###启动Tomcat结束###" level="info" />
    </target>

    <!--部署到tomcat-->
	<!-- 远程传输文件，需要添加第三方的jsch-0.1.54.jar文件才能支持 -->
    <target name="scp-file" description="========uploading===========">
    	<echo message="###远程传输文件开始###" level="info" />
    	<scp todir="${remote.server.name}@${remote.server.ip}:${tomcat.home}/webapps/${project.name}" password="${remote.server.pwd}" port="${remote.server.port}" trust="true" failonerror="true">
    		<fileset dir="${build.dir}/${WebRoot.name}" />
    	</scp>
    	<echo message="###远程传输文件结束###" level="info" />
	</target>
	
	<!-- 上传补丁包到ftp服务器 -->
	<target name="upload_to_ftp">
        <echo message="将${build.dir}/${dest.zip} 上传到 ${ftp.server.ip}/${ftp.server.dir} " level="info"></echo>
        <ftp password="${ftp.server.password}" server="${ftp.server.ip}" userid="${ftp.server.user}" remotedir="${ftp.server.dir}">
            <fileset dir="${build.dir}">
                <include name="${dest.zip}"/>
            </fileset>
        </ftp>
    </target>
    
    <!-- 部署，启动关闭tomcat-->
	<target name="publish">
		<!-- 停止tomcat -->
		<antcall target="shutdowntomcat" />
		<!-- 分发更新文件 -->
		<antcall target="scp-file" />
		<!-- 启动tomcat -->
		<antcall target="startuptomcat" />
		<!-- 上传补丁包到ftp服务器 -->
		<!-- <antcall target="upload_to_ftp" /> -->
	</target>
	
	<!-- - - - - - - - - -target: init - - - - - - - - - -->
	<target name="init" depends="clear">
		<mkdir dir="${build.dir}" />
	</target>
	
	<!-- - - - - - - - - -target: clear - - - - - - - - - -->
	<target name="clear">
		<delete dir="${build.dir}" />
		<!-- <delete dir="${tomcat.home}/work/Catalina/localhost/${project.name}" />
		<delete dir="${tomcat.home}/webapps/${project.name}" />
        <delete dir="${tomcat.home}/webapps/${project.name}.war" />
        <delete dir="${tomcat.home}/wtpwebapps/${project.name}" />
        <delete dir="${tomcat.home}/wtpwebapps/${project.name}.war" /> -->
	</target>
</project>