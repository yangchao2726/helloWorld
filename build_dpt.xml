<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="patch_without_compile">

	<!-- TLBADX 项目 -->
	<property name="project.name" value="dpt" />
	<tstamp>
		<format property="date.today" pattern="yyyyMMdd-HHmmss" />
	</tstamp>
	<!-- svn提交change日志 -->
	<property name="change.log" value="./changeLog.txt" />
	<!-- 补丁包所在目录 -->
	<property name="build.dir" value="./release" />
	
	<!-- 读取svn日志提取出新增和修改文件 获取补丁包包含的文件 -->
	<property name="patch.includesfile" value="${build.dir}/patchfiles.txt" />
	<property name="patch.includesfile.java" value="${build.dir}/patchfiles_java.txt" />
	
	<!-- 补丁包名称 -->
	<property name="dest.zip" value="${project.name}_${date.today}_patch.zip" />
	
	<!-- - - - - - - - - - target:从svn日志中，取出checkin文件 - - - - - - - - - -->
	<target name="patchfile" depends="init" description="处理 svn_changge 日志 ">
		<!-- 去掉 SVN日志中的注释，只保留Added和Modified记录 -->
		<concat destfile="${patch.includesfile}" append="false" force="true">
			<fileset file="${change.log}" />
			<filterchain>
				<containsregex byline="true" pattern="^([\s]+)(?:A|M)([\s]+)(.+)$" replace="\3" />
			</filterchain>
		</concat>
		<!-- 去掉 SVN日志中的注释，只保留Added和Modified记录的java文件 -->
		<concat destfile="${patch.includesfile.java}" append="false" force="true">
			<fileset file="${change.log}" />
			<filterchain>
				<containsregex byline="true" pattern="^([\s]+)(?:A|M)([\s]+)(.+)\.java$" replace="\3.java" />
			</filterchain>
		</concat>
		
		<!-- 将src目录替换为classes目录 主要针对提交的java代码 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.java$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1.class" />
		</replaceregexp>
		
		<!-- 将src目录下的【内部类】替换到classes目录 主要针对提交的java代码 -->
		<replaceregexp file="${patch.includesfile.java}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.java$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1$*.class" />
		</replaceregexp>
		
		<!-- 将src目录下的xml配置文件替换到classes目录下 主要针对提交的xml -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.xml$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1.xml" />
		</replaceregexp>
		
		<!-- 将src目录下的properties文件替换到classes目录下 主要针对提交的properties文件 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:src)/(.+)\.properties$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1.properties" />
		</replaceregexp>
		
		<!-- 将config目录下的xml配置文件替换到classes目录下 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:config)/(.+)\.xml$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1.xml" />
		</replaceregexp>
		
		<!-- 将config目录下的properties配置文件替换到classes目录下 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?:X) X作为非捕获组 相当于java的group概念 提取出代码的相对路径 -->
			<regexp pattern="^/.+/(?:config)/(.+)\.properties$" />
			<substitution expression="WebRoot/WEB-INF/classes/\1.properties" />
		</replaceregexp>
		
		<!-- 替换掉WebRoot/前面的路径 主要针对提交.js .css 等图片页面文件 -->
		<replaceregexp file="${patch.includesfile}" byline="true">
			<!-- (?=X) 从句子前面读取 如果X前面为空直接略过。 前面不为空的执行替换操作 -->
			<regexp pattern="^/.+/(?=WebRoot/)" />
			<substitution expression="" />
		</replaceregexp>
	</target>
	
	<!-- - - - - - - - - - target:package - - - - - - - - - -->
	<target name="package" description="补丁包">
		<delete dir="${build.dir}/WebRoot" />
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="." includesfile="${patch.includesfile}" />
		</copy>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="." includesfile="${patch.includesfile.java}" />
		</copy>
		<delete file="${build.dir}/${dest.zip}" />
		<zip destfile="${build.dir}/${dest.zip}" compress="true">
			<zipfileset prefix="${project.name}" dir="${build.dir}/WebRoot">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>
	
	<!-- - - - - - - - - - target:release without compile - - - - - - - - - -->
	<target name="patch_without_compile" depends="patchfile, package"
		description="--> release">
		<echo>补丁包打包结束</echo>
	</target>
	
	<!-- - - - - - - - - -target: init - - - - - - - - - -->
	<target name="init" depends="clean">
		<mkdir dir="${build.dir}" />
	</target>
	
	<!-- - - - - - - - - -target: clean - - - - - - - - - -->
	<target name="clean">
		<delete dir="${build.dir}" />
	</target>
</project>